<%- contentFor('nav') %> 
  <nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid" style="height: 4rem;">
      <a id="logo" href="#" class="navbar-brand text-primary">myblog.</a>
      <ul class="nav">
        <li class="nav-item">
          <a href="#" class="nav-link">Create New Post</a>
        </li>
        <li class="nav-item">
          <a href="#" class="nav-link">Dashboard</a>
        </li>
        <li class="nav-item">
          <form action="/auth/logout" method="post">
            <button type="submit" class="nav-link btn btn-link">Logout</button>
          </form>
        </li>
      </ul>
    </div>
  </nav>
<%- contentFor('content') %>
  <div id="title-container" class="form-floating mb-3">
    <input type="text" class="form-control" id="floatingInput" name="title" placeholder="Title">
    <label for="floatingInput">Title</label>
  </div>
  <div id="editor" class="mb-3" style="height: 30rem;"></div>
  <div id="button-container" class="d-flex gap-2">
    <form id="post-create" action="/api/posts" method="post">
      <input class="postBtn btn btn-primary" type="submit" value="Create">
    </form>
    <form id="post-publish" action="/api/posts" method="post">
      <input class="postBtn btn btn-success" type="submit" value="Create & Publish">
    </form>
  </div>

  <!-- Include the Quill library -->
  <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>

  <!-- Initialize Quill editor -->
  <script>
    var quill = new Quill('#editor', {
      theme: 'snow'
    });
  </script>

  <script>
    const unpublishEvent = document.querySelector('#post-create')
    unpublishEvent.addEventListener('submit', (e) => {
      e.preventDefault();

      const payload = {
        postTitle: document.getElementById('floatingInput').value,
        postContentPreview: quill.getText(),
        postContent: quill.getContents(),
        postPublishedStatus: false
      }

      fetch('/api/posts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      }).then(res => {
        return res.json()
      }).then(json => console.log(json))
    })

    const publishEvent = document.querySelector('#post-publish')
    publishEvent.addEventListener('submit', (e) => {
      e.preventDefault();

      const payload = {
        postTitle: document.getElementById('floatingInput').value,
        postContentPreview: quill.getText(),
        postContent: quill.getContents(),
        postPublishedStatus: true 
      }

      fetch('/api/posts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      }).then(res => {
        return res.json()
      }).then(json => console.log(json))
    })
  </script>